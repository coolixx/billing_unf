
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") Тогда
		НастройкаБиллинга = Параметры.Ключ;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкаБиллинга);
		
		СохраненныеНастройки = НастройкаБиллинга.Настройки.Получить();
		
		Token = bs_РаботаСAPIВызовСервера.ПолучитьТокен(НастройкаБиллинга);
					
	УстановитьПривилегированныйРежим(Истина);		
			ИдентификаторРегламентногоЗадания 	= НастройкаБиллинга.ИдентификаторРегламентногоЗадания; 
			
			НайденноеРегламентноеЗадание = Неопределено;
			Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда			
				НайденноеРегламентноеЗадание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
			КонецЕсли;			
		
			Если НайденноеРегламентноеЗадание 	= Неопределено Тогда
				ИдентификаторРегламентногоЗадания	= Неопределено;
				РасписаниеРегламентногоЗадания 		= Новый РасписаниеРегламентногоЗадания;
			Иначе
				РасписаниеРегламентногоЗадания 	= НайденноеРегламентноеЗадание.Расписание;
			КонецЕсли;		
	УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ВидОблачногоСервиса = Перечисления.BS_ВидыОблачныхСервисов1С.ГотовоеРабочееМесто;
		Наименование = Строка(ВидОблачногоСервиса);
		
		СохраненныеНастройки = ПолучитьНастройкиПоУмолчанию();
	КонецЕсли;

	Если СохраненныеНастройки <> Неопределено Тогда	
		НастройкаДнейОповещенияКонтрагентов = СохраненныеНастройки.ДниОповещенияКонтрагентов;
		ДниОповещенийКонтрагентов.Загрузить(НастройкаДнейОповещенияКонтрагентов);
	КонецЕсли;

	ПараметрНастройкаБиллинга = Контрагенты.Параметры.Элементы.Найти("НастройкаБиллинга");
	ПараметрНастройкаБиллинга.Использование = Истина;
	ПараметрНастройкаБиллинга.Значение 		= НастройкаБиллинга;
	
	ОбновитьДниОповещенияКонтрагентов();
КонецПроцедуры

&НаКлиенте
Процедура TokenОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	Если НЕ СохранитьНастройки() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	bs_РаботаСAPIВызовСервера.ЗаписатьНовыйТокен(НастройкаБиллинга, Текст);
	Token = bs_РаботаСAPIВызовСервера.ПолучитьТокен(НастройкаБиллинга);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНадписьРасписанияОбмена();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ НужноЗакрытьОкно Тогда
		
		Отказ = Истина; 
		
		Если ЗавершениеРаботы Тогда 
			ТекстПредупреждения = "Настройки не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НужноЗакрытьОкно = Истина;
		
		СохранитьНастройки(Истина);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		НужноЗакрытьОкно = Истина;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройки(ЗакрытьПоОкончании = Ложь)
	
	НастройкаСохранена = СохранитьНастройкуСервер();
	
	Если ЗакрытьПоОкончании Тогда Закрыть() КонецЕсли;
	
	Оповестить("СозданаИзмененаНастройка");
	
	Возврат НастройкаСохранена
	
КонецФункции  

&НаСервере
Функция СохранитьНастройкуСервер()
	
	Если Модифицированность ИЛИ НастройкаБиллинга.Пустая() Тогда
		
		Если НастройкаБиллинга.Пустая() Тогда
			ТекущийОбъект = Справочники.BS_НастройкиБиллинга.СоздатьЭлемент();
			ТекущийОбъект.Настройки = Новый ХранилищеЗначения(ПолучитьНастройкиПоУмолчанию());
		Иначе
			ТекущийОбъект = НастройкаБиллинга.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ЭтаФорма);
	
		НастройкиБиллинга = ТекущийОбъект.Настройки.Получить();
		НастройкиБиллинга.ДниОповещенияКонтрагентов = ДниОповещенийКонтрагентов.Выгрузить();

		ТекущийОбъект.Настройки = Новый ХранилищеЗначения(НастройкиБиллинга);

		ТекущийОбъект.Записать();
		НастройкаБиллинга = ТекущийОбъект.Ссылка;
		
УстановитьПривилегированныйРежим(Истина); //Для возможности всем пользователям с правами устанавливать расписания		
		Если РасписаниеРегламентногоЗадания <> Неопределено 
			И НЕ BS_ОбщегоНазначенияВызовСервераПовтИсп.БазаИспользуетсяВМоделиСервиса() Тогда
			
			ИменаИспользуемыхРеглЗаданий 	= BS_ОбщегоНазначенияВызовСервера.ПолучитьИменаИспользуемыхРеглЗаданий();
			СтруктураРеглЗаданий 			= BS_ОбщегоНазначенияВызовСервера.ПолучитьИспользуемыеРеглЗадания();

			ПараметрыЗапуска = Новый Массив();
			ПараметрыЗапуска.Добавить(СтруктураРеглЗаданий.Биллинг);
			ПараметрыЗапуска.Добавить(НастройкаБиллинга);
			
			Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
			Если Задание <> Неопределено Тогда

				ПараметрыИзмененияЗадания = Новый Структура();
				ПараметрыИзмененияЗадания.Вставить("Использование", Истина);
				ПараметрыИзмененияЗадания.Вставить("Параметры", ПараметрыЗапуска);
				ПараметрыИзмененияЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
				ПараметрыИзмененияЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				ПараметрыИзмененияЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);

				РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторРегламентногоЗадания, ПараметрыИзмененияЗадания);

			Иначе

				ПараметрыЗадания = Новый Структура();
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
				ПараметрыЗадания.Вставить("Наименование", ИменаИспользуемыхРеглЗаданий.Биллинг
					+ Наименование);
				ПараметрыЗадания.Вставить("Ключ", ИменаИспользуемыхРеглЗаданий.Биллинг
					+ Наименование);
				ПараметрыЗадания.Вставить("Использование", Истина);
				ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Ложь);
				ПараметрыЗадания.Вставить("Параметры", ПараметрыЗапуска);
				ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);

				Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
				Если ОбщегоНазначения.РазделениеВключено() Тогда
					//@skip-warning
					ИдентификаторРегламентногоЗадания = Задание.Идентификатор.УникальныйИдентификатор();
				Иначе
					ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
				КонецЕсли;

			КонецЕсли;

			Если Задание = Неопределено Тогда
				ИдентификаторРегламентногоЗадания = Неопределено;
			КонецЕсли;

		Иначе
			РегламентныеЗаданияСервер.УдалитьЗадание(ИдентификаторРегламентногоЗадания);
			ИдентификаторРегламентногоЗадания = Неопределено;
		КонецЕсли;		
	
УстановитьПривилегированныйРежим(Ложь);	
		
		ТекущийОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗадания;				
		ТекущийОбъект.Записать();
		
		Модифицированность = Ложь;
			                                                           
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат Истина
	
КонецФункции

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьНастройки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеБиллинга(Команда)
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписание", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписание(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонрагентов(Команда)
	
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	
	Результат = bs_работаСAPIКлиент.ВызватьМетодAPIGET("/customers", Token);
	
	ОбработатьРезультатНаСервере(Результат);
	
	Элементы.Контрагенты.Обновить();
	
КонецПроцедуры
  
&НаСервере
Процедура ОбработатьРезультатНаСервере(Результат)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НастройкаБиллинга", НастройкаБиллинга);
	Запрос.Текст = "ВЫБРАТЬ
	|	BS_КонтрагнетыОблачногоСервиса.НастройкаБиллинга КАК НастройкаБиллинга,
	|	BS_КонтрагнетыОблачногоСервиса.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремДанные
	|ИЗ
	|	РегистрСведений.BS_КонтрагнетыОблачногоСервиса КАК BS_КонтрагнетыОблачногоСервиса
	|ГДЕ
	|	BS_КонтрагнетыОблачногоСервиса.НастройкаБиллинга = &НастройкаБиллинга";
	Запрос.Выполнить();
	
	Для Каждого Строка из Результат Цикл
		
		Идентификатор = Строка.id;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Идентификатор", Строка.id);
		Запрос.Текст = "ВЫБРАТЬ
		|	ВремДанные.НастройкаБиллинга КАК НастройкаБиллинга,
		|	ВремДанные.Идентификатор КАК Идентификатор
		|ИЗ
		|	ВремДанные КАК ВремДанные
		|ГДЕ
		|	ВремДанные.Идентификатор = &Идентификатор";
		
		ВыполненныйЗапрос = Запрос.Выполнить();
		
		Если ВыполненныйЗапрос.Пустой() Тогда
			
			НоваяЗапись = РегистрыСведений.BS_КонтрагнетыОблачногоСервиса.СоздатьМенеджерЗаписи();
			НоваяЗапись.НастройкаБиллинга 	= НастройкаБиллинга;
			НоваяЗапись.Идентификатор 		= Идентификатор;
			НоваяЗапись.Наименование 		= Строка.name;
			НоваяЗапись.Контрагент 			= Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Строка.inn);
			
			НоваяЗапись.Записать();
			
		Иначе      
			
			НоваяЗапись = РегистрыСведений.BS_КонтрагнетыОблачногоСервиса.СоздатьМенеджерЗаписи();
			НоваяЗапись.НастройкаБиллинга 	= НастройкаБиллинга;
			НоваяЗапись.Идентификатор 		= Идентификатор;
			НоваяЗапись.Прочитать();
			
			НоваяЗапись.Контрагент 			= Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Строка.inn);
			НоваяЗапись.Наименование 		= Строка.name;
			
			НоваяЗапись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеБиллинга.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПоУмолчанию()
	Возврат Справочники.BS_НастройкиБиллинга.ПолучитьНастройкиПоУмолчанию();
КонецФункции

&НаСервере
Процедура ОбновитьДниОповещенияКонтрагентов()
	
	ДниОповещений = ПолучитьНастройкиПоУмолчанию().ДниОповещенияКонтрагентов;
	Если ДниОповещений.Количество() <> ДниОповещенийКонтрагентов.Количество() Тогда
		
		Для каждого Строка из ДниОповещенийКонтрагентов Цикл
			
			Если Строка.Пометка Тогда
				НайденнаяСрока = ДниОповещений.Найти(Строка.День);
				НайденнаяСрока.Пометка = Строка.Пометка;
			КонецЕсли;
			
		КонецЦикла;
		
		ДниОповещенийКонтрагентов.Очистить();
		ДниОповещенийКонтрагентов.Загрузить(ДниОповещений);
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти
